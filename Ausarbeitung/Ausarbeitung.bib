@manual{intel2017man,
  author = {{Intel Corporation}},
  title = {Intel 64 and IA-32 Architectures Software Developer’s Manual},
  year = {2016},
  month = apr,
  organization = {Intel Corporation},
  note = {\url{http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html},
   visited 2017-08-19}
}

@ARTICLE{4051119,
  author={Huffman, David A.},
  journal={Proceedings of the IRE}, 
  title={A Method for the Construction of Minimum-Redundancy Codes}, 
  year={1952},
  volume={40},
  number={9},
  pages={1098-1101},
  doi={10.1109/JRPROC.1952.273898}
}

@article{10.1145/3342555,
author = {Moffat, Alistair},
title = {Huffman Coding},
year = {2019},
issue_date = {July 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {4},
issn = {0360-0300},
url = {https://doi-org.eaccess.tum.edu/10.1145/3342555},
doi = {10.1145/3342555},
abstract = {Huffman’s algorithm for computing minimum-redundancy prefix-free codes has almost legendary status in the computing disciplines. Its elegant blend of simplicity and applicability has made it a favorite example in algorithms courses, and as a result it is perhaps one of the most commonly implemented algorithmic techniques. This article presents a tutorial on Huffman coding and surveys some of the developments that have flowed as a consequence of Huffman’s original discovery, including details of code calculation and of encoding and decoding operations. We also survey related mechanisms, covering both arithmetic coding and the recently developed asymmetric numeral systems approach and briefly discuss other Huffman-coding variants, including length-limited codes.},
journal = {ACM Comput. Surv.},
month = {aug},
articleno = {85},
numpages = {35},
keywords = {Huffman code, minimum-redundancy code, data compression}
}